var_1 <- sample(c(1,4), 100, replace = TRUE)
var_1 <- sample(c(1:4), 100, replace = TRUE)
var_2 <- sample(c(1:4), 100, replace = TRUE)
var_1 <- factor(var_1, levels = c(1,2,3,4), labels = c("very small", "small", "medium", "large" ))
var_2 <- factor(var_2, levels = c(1,2,3,4), labels = c("very low", "low", "high", "very high"))
var_1 <- sample(c(1:4), 100, replace = TRUE)
var_2 <- sample(c(1:4), 100, replace = TRUE)
var_1 <- factor(var_1, levels = c(1,2,3,4), labels = c("very small", "small", "medium", "large" ))
var_2 <- factor(var_2, levels = c(1,2,3,4), labels = c("very low", "low", "high", "very high"))
table_of_data <- table(var_1, var_2)
chisq.test(table_of_data)
table_of_data
install.packages("psych") #1 Installing the "psych" package
install.packages("psych") #1 Installing the "psych" package
install.packages("psych") #1 Installing the "psych" package
library(psych) #2 Loading the psych package
library(psych) #2 Loading the psych package
my_data <- bfi #3 Assigning the "bfi" data set from "psych" to a new data frame named "my_data"
str(my_data) #4 Explore the data
# ANSWER to 4: The nuber of variables is 28 and the number of enteties is 2800
summary(my_data) # Explore the data
class(my_data$age)
#6 Creating a new dataframe called "demographics" where
demographics <- data.frame(gender = my_data$gender, #gender is kept as an integer
education = as.factor(my_data$education), #education is tranformed to a factor and
age = as.numeric(my_data$age)) #age is set as a numeric value
mean(demographics$age) #7 looking for the mean value of variable "age"
#8 Creaing a new variable called "select" (with a uniform distribution between 0 and 1) to the "demographics" data frame
demographics$select <- runif(2800)
#9 create a new data frame from demographics where all observations in "select" is equal to or higher than .5
demographics_subset <- subset(demographics, select >= .5)
#10 Adding a new variable "called sum_of_rows" to "my_data" that is the combined value of all "A" variables
my_data$sum_of_rows <- rowSums(my_data[c("A1", "A2", "A3", "A4", "A5")])
#12 Bellow we add another variable where missing data is ignored:
my_data$sum_of_rows_no_na <- rowSums(my_data[c("A1", "A2", "A3", "A4", "A5")], na.rm = T)
View(my_data)
# 1-----------------------------------------
rand_bellow <- function(theta){ # Create a function with the name "rand_bellow"
####################################Comment from ML####################################
# Helt ok lösning. Men du kan göra det lite mer effektivt. T ex behöver du ingen
# variabel condition och därmed ingen if sats i while loopen.
# rand_below <- function(theta){
#    rand_number <- runinf(1)
#    n_iter <- 1
#    while(rand_number > theta){
#     rand_number <- runinf(1)
#     n_iter <- n_iter + 1
#    }
#    return(c(n_iter, rand_number))
# }
#######################################################################################
condition <- TRUE # condition for
n_interactions <- 0 # starting value for number of interactions
while (condition) { #check whether the condition is met
rand_number <- runif(1) # generate a random number between 0 and 1
n_interactions <- n_interactions + 1 # adds 1 to the number of iterations
if(rand_number < theta){
condition <- FALSE # If the random number is lower than "theta" the "condition" is changed to "False"
return(c(n_interactions, rand_number)) # Returns a vector containing the number of iterations and the random number
}
}
}
vec_1 <- rand_bellow(.005) # here we test the function with a "theta" assigned to .005
vec_1
rand_bellow(.5)
rand_bellow(.3)
rand_bellow(.2)
# 2----------------------------------------
vec_1_4 <- c(1:4) # create a vector named "vec_1_4" with numeric values 1:4
to_power_of_n <- function(x, n){ # create a function that use x and n as arguments named "to_the_power_of_n ...
return(c(x^n)) # that return x raised to the power of n
####################################Comment from ML####################################
# Funkar, men här behöver du inte c(). x^n är ju en vektor.
#######################################################################################
}
vec_2 <- to_power_of_n(vec_1_4, 2) # here we use tha numeric vector "vec_1_4" as x and assign "2" to n and create a new vector from the output named "vec_2"
to_power_of_n(vec_1_4, 2) #
to_power_of_n(1:10 2) #
to_power_of_n(1:10, 2) #
# 3----------------------------------------
# 3----------------------------------------
vec_1 <- c(rnorm(30, mean=20, sd=10)) # this is the vector we create to use to test the bellow function. The data is normally distributed with a mean of 20 and a standard deviation of 10
# This function z-transform values in vectors and rename individually upper and lower outliers to NA according to set input value
my_custom_function <- function(vector, z_upper, z_lower){
z_as_NA <- scale(vector)
z_as_NA[z_as_NA < z_lower] <- NA
z_as_NA[z_as_NA > z_upper] <- NA
return(z_as_NA)
}
z <- my_custom_function(vec_1, .5, -.5)
z
install.packages(c("MCMCglmm", "MuMIn"))
#1.----
#Load 5 (five) packages that are not a part of base R. Make sure to comment your code to give a short
#description of what each packages does.
library(ggplot2)       #package for making nice graphs, based on 'Grammar of Graphics'
library(BayesFactor)   #package containing functions computing Bayes Factor for varia
#designs, incl. t tests, One-way ANOVAs and Linear regressions
library(MuMIn)         #package on multi-model inference, which allows comparing all
#possible configurations of variables in a 'global model',
#comparing them with AIC (standard)
library(lme4)          #package for running linear, generalized linear and nonlinear
#mixed models, including hierarchical models. Non-Bayesian
library(MCMCglmm)
library(tidyverse)
tidy_packages <-tidyverse_packages(include_self = TRUE)
#for some unknown reason, tidy_packages[17] does not give the 'appropriate' name for package, so I
#manually put this in (I know, I know...)
tidy_packages[17] <- "readxl"
tidyverse_packages()
plot_1 <- ggplot(data = diamonds)+
geom_point(mapping = aes(x = price, y = carat, color = clarity))+
geom_smooth(mapping = aes(x = price, y = carat))+
facet_wrap(~cut, nrow = 3)
plot_1 + labs(x = "Price in Dollars", y = "Carat", title = "Diamond Graph", subtitle = "The relationship between price and carat grouped by cut levels")
plot_2 <- ggplot(data = diamonds)+
geom_bar(aes(x = cut, fill = color), position = "dodge")
plot_2 + theme(legend.position = "bottom")
plot_2 + theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_blank()
)
plot_3 <- ggplot(data = diamonds)+
geom_boxplot(mapping = aes(x = cut, y = table, fill = cut), outlier.colour="purple", outlier.shape=5, outlier.size = 4)+
scale_x_discrete(limits = c("Ideal", "Fair", "Good", "Very Good","Premium"))+
theme(legend.position = 'none')
plot_3 + coord_flip()
plot_4 <- ggplot(diamonds, aes(x=price)) +
geom_density(color = "purple", fill = "purple")
plot_4 + labs(x = "Price in Dollars", y = "Density", caption = "Figure 1. Skewed distribution of price")+
annotate(geom = "text", x = 6000, y = 3e-4, label = "Mean Price") +
geom_vline(aes(xintercept=mean(price)), color="black", linetype="dashed", size=2)
plot_4 + labs(x = "Price in Dollars", y = "Density", caption = "Figure 1. Skewed distribution of price")+
annotate(geom = "text", x = mean(price) + 200, y = 3e-4, label = "Mean Price") +
geom_vline(aes(xintercept=mean(price)), color="black", linetype="dashed", size=2)
plot_4 + labs(x = "Price in Dollars", y = "Density", caption = "Figure 1. Skewed distribution of price")+
annotate(geom = "text", x = mean(price) + 1000, y = 3e-4, label = "Mean Price") +
geom_vline(aes(xintercept=mean(price)), color="black", linetype="dashed", size=2)
plot_4 <- ggplot(diamonds, aes(x=price)) +
geom_density(color = "purple", fill = "purple")
plot_4 + labs(x = "Price in Dollars", y = "Density", caption = "Figure 1. Skewed distribution of price")+
annotate(geom = "text", x = mean(price) + 1000, y = 3e-4, label = "Mean Price") +
geom_vline(aes(xintercept=mean(price)), color="black", linetype="dashed", size=2)
plot_4 + labs(x = "Price in Dollars", y = "Density", caption = "Figure 1. Skewed distribution of price")+
annotate(aes(x = mean(price) + 1000), geom = "text", , y = 3e-4, label = "Mean Price") +
geom_vline(aes(xintercept=mean(price)), color="black", linetype="dashed", size=2)
plot_4 + labs(x = "Price in Dollars", y = "Density", caption = "Figure 1. Skewed distribution of price")+
annotate(aes(x = mean(price) + 1000), geom = "text", y = 3e-4, label = "Mean Price") +
geom_vline(aes(xintercept=mean(price)), color="black", linetype="dashed", size=2)
?annotate
plot_5 <- ggplot(diamonds, aes(x= table)) +
geom_dotplot(binwidth = .5, fill = "white")+
scale_y_continuous(NULL, breaks = NULL)+
theme_dark()+
theme(panel.grid = element_blank())+
labs(title = "Number of Observations in Table Variable",
caption = "The width of a dot corresponds to the bin width of .5")
plot_5
plot_6 <- ggplot(diamonds, aes(x = carat))+
geom_histogram(binwidth=.05, color = "blue", fill = "lightblue")+
theme_light()+
theme(panel.grid = element_blank(),
panel.border = element_blank()
)+
labs(x = "CaRaT", y = "Frequency", title = "Number of Diamonds per Carat")
plot_6
plot_7 <- ggplot(diamonds, aes(x= cut, y= carat, fill = color)) +
geom_violin()+
scale_x_discrete(limits = c("Premium", "Ideal"))+
scale_fill_discrete(name = "COLOR", labels = c("Dark Purple", "Purple", "Blue", "Green", "Light Green", "Black", "Yellow")) +
theme(legend.text.align = 0.4,
legend.background = element_rect(fill = "grey"),
axis.ticks = element_blank(),
panel.background = element_blank()
)
plot_7
p1 <- ggplot(diamonds, aes(x = carat, y = price))
p1 + geom_point(position = "jitter", alpha = 1/100, size = 5) +
theme(plot.title = element_text(hjust = .5, color = "yellow", size = 15, face = "bold"),
plot.background = element_rect(fill = "red"),
panel.background = element_rect(fill = "red"),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.text.x.bottom = element_text(color = "white"),
axis.text.y = element_text(color = "white"),
axis.title.x = element_text(color = "darkred", size = 13, face = "italic"),
axis.title.y = element_text(color = "darkred", size = 13, face = "italic")) +
geom_smooth(color = "white") +
labs(title = "Ugly AF :)") +
facet_grid(~cut) +
theme(strip.background = element_rect(color = "darkred", fill = NA, size = 2, linetype = "solid"))
p2 <- ggplot(diamonds, aes(x = color, fill = clarity))
p2 + geom_bar(position = "fill") +
theme(plot.title = element_text(hjust = .5, color = "yellow", size = 15, face = "bold"),
plot.subtitle = element_text(hjust = .5, color = "red", size = 10, face = "bold"),
plot.background = element_rect(fill = "Blue"),
panel.background = element_rect(fill = "Blue"),
axis.title.x = element_text(color = "Yellow", size = 10, face = "bold"), #
axis.title.y = element_text(color = "Yellow", size = 10, face = "bold"),
axis.text.x = element_text(color = "Yellow"),
axis.text.y = element_text(color = "Yellow"),
legend.background = element_rect(fill = "NA"),
legend.key = element_rect(color = "NA", fill = "NA"),
legend.text = element_text(color = "Yellow"),
legend.title = element_text(color = "Red", face = "bold")) +
coord_flip() +
scale_fill_brewer(palette = "RdYlGn") +
labs(title = "Diamonds from the future II",
subtitle = "This is flipped")
p3 <- ggplot(diamonds, aes(x = color, y = price/carat))
p3 + geom_boxplot(outlier.color = NULL, outlier.alpha = 0.25, aes(color = color, fill = color)) +
theme(plot.title = element_text(hjust = .5, color = "darkgrey", size = 14, face = "bold.italic"),
plot.subtitle = element_text(hjust = .5, color = "darkgrey"),
axis.title.x = element_text(color = "darkgrey", size = 13, face = "bold"),
axis.title.y = element_text(color = "darkgrey", size = 13, face = "bold"),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.background = element_rect(fill = "black"),
panel.background = element_rect(fill = "black"),
legend.position = "none")+
labs(title = "Box F..... Plot",
subtitle = "This plots is useless but cool")+
xlab("Color")+
ylab("Bling Factor (price/carat)")+
stat_summary(fun.y = "median", geom="point", color = "black")+
scale_x_discrete(labels=c("D - Best", "E", "F", "G", "H", "I", "J - Best"))
p4 <- ggplot(diamonds, aes(carat))
p4 + geom_density(aes(fill = color), alpha = .5) +
theme(plot.title = element_text(hjust = .5, color = "darkgrey", size = 14, face = "bold.italic"),
panel.grid = element_blank(),
axis.ticks = element_blank(),
plot.background = element_rect(fill = "NA"),
panel.background = element_rect(fill = "NA"),
legend.background = element_rect(fill = "NA"),
legend.key = element_rect(color = "NA", fill = "NA"),
legend.position = c(.82, .1),
legend.direction = "horizontal",
legend.text = element_text(color = "darkgrey"),
legend.title = element_text(face = "bold")) +
facet_wrap(~cut)
color_conditions <- c("D", "J")
cut_conditions <- c("Fair", "Ideal")
diamonds_filter_p5 <- filter(diamonds, color %in% color_conditions)
diamonds_filter_p5_2 <- filter(diamonds_filter_p5, cut %in% cut_conditions)
p5 <-ggplot(diamonds_filter_p5_2[sample(nrow(diamonds_filter_p5_2), 100), ], aes(x = cut, y = carat, position = "dodge"))
p5 + geom_dotplot(binaxis = "y", aes(fill = color), stackdir = "center",stackratio=.5, dotsize=.5) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
axis.ticks = element_blank()) +
scale_fill_brewer(palette = "Dark2")
cut_conditions <- c("Fair", "Ideal")
diamonds_filter_p6 <- filter(diamonds, cut %in% cut_conditions)
ggplot(diamonds_filter_p6, aes(carat, fill = cut)) +
geom_histogram(binwidth = 0.1, position = "dodge") +
scale_fill_brewer(palette = "Set1") +
xlim(c(0,3)) +
theme_bw() +
theme(panel.grid = element_blank(),
panel.border = element_blank(),
legend.position = c(.8, .8),
axis.ticks = element_blank())
diamonds
clarity_conditions <- c("I1", "VVS1", "IF")
diamonds_filter_p7 <- filter(diamonds, clarity %in% clarity_conditions)
p7 <- ggplot(diamonds_filter_p7, aes(color, carat, fill=clarity, color = clarity))
p7 + geom_violin() +
theme(plot.title = element_text(hjust = .5, color = "darkgrey", size = 14, face = "bold.italic"),
plot.subtitle = element_text(hjust = .5, color = "darkgrey"),
panel.grid = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_text(color = "darkgrey", size = 10),
axis.title.y = element_text(color = "darkgrey", size = 10),
plot.background = element_rect(fill = "Black"),
panel.background = element_rect(fill = "Black"),
legend.position = c(.5, .9),
legend.background = element_rect(fill = "NA"),
legend.key = element_rect(color = "NA", fill = "NA"),
legend.text = element_text(color = "darkgrey"),
legend.title = element_text(color = "darkgrey", face = "bold")) +
guides(fill=guide_legend(nrow=1,byrow=TRUE))
my_data <- bfi
library(psych)
my_data <- bfi
?quantile
library(MASS)
anorexia_data <- anorexia
t.test(anorexia_data$Prewt, anorexia_data$Postwt)
t.test(anorexia_data$Prewt, anorexia_data$Postwt, paired = TRUE)
mtcars
car_data <- mtcars
install.packages('corrgram')
library(corrgram)
corrgram(car_data)
?corrgram
labs=colnames(state.x77)
corrgram(state.x77, oma=c(7, 7, 2, 2),
outer.labels=list(bottom=list(labels=labs,cex=1.5,srt=60),
left=list(labels=labs,cex=1.5,srt=30)))
X <- rnorm(150)
Y <- rnorm(150)
cor.test(X,Y)
?cor.test
?table
?chisq.test
x <- matrix(c(12,14,21,18,17,18), nrow = 3)
x
x <- matrix(c(12,14,21,18,17,18), nrow = 3, byrow = TRUE)
x
chisq.test(x)
?sample
sample(c(1,2,3,4), 1600, replace = TRUE, prob = c(.1,.1,.3, .5))
x <- sample(c(1,2,3,4), 1600, replace = TRUE, prob = c(.1,.1,.3, .5))
table(x)
chisq.test(x)
?chisq.test
chisq.test(x, p = rep(.25, 4))
x
t_x table(x)
t_x <- table(x)
chisq.test(t_x)
811/1600
t_x
names(t_x) <- c("S", "H", "D", "C")
t_X
t_x
knitr::opts_chunk$set(echo = TRUE)
poker_year <- tibble(S = integer(), H = integer(), D = integer(), C = integer())
library(tidyverse)
poker_year <- tibble(S = integer(), H = integer(), D = integer(), C = integer())
todays_poker <- sample(c(1,2,3,4), 1600, replace = TRUE, prob = poker_outcomes)
poker_outcomes <- c(.25, .25, .4, .1)
todays_poker <- sample(c(1,2,3,4), 1600, replace = TRUE, prob = poker_outcomes)
todays_summary  <- table(todays_poker)
names(todays_summary) <- c("S", "H", "D", "C")
poker_year <- add_row(poker_year, todays_summary)
names(todays_summary) <- c("S", "H", "D", "C")
poker_year <- add_row(poker_year, todays_summary)
poker_year <- add_row(poker_year, S = todays_summary[1])
poker_outcomes <- c(.25, .25, .4, .1)
poker_year <- tibble(S = integer(), H = integer(), D = integer(), C = integer())
for (day in 1:365) {
todays_poker <- sample(c(1,2,3,4), 1600, replace = TRUE, prob = poker_outcomes)
todays_summary  <- table(todays_poker)
names(todays_summary) <- c("S", "H", "D", "C")
poker_year <- add_row(poker_year, S = todays_summary[1],
H = todays_summary[2],
D = todays_summary[3],
C = todays_summary[4])
}
poker_outcomes <- c(.25, .25, .35, .15)
poker_year <- tibble(S = integer(), H = integer(), D = integer(), C = integer())
for (day in 1:365) {
todays_poker <- sample(c(1,2,3,4), 1600, replace = TRUE, prob = poker_outcomes)
todays_summary  <- table(todays_poker)
names(todays_summary) <- c("S", "H", "D", "C")
poker_year <- add_row(poker_year, S = todays_summary[1],
H = todays_summary[2],
D = todays_summary[3],
C = todays_summary[4])
}
chisq.test(poker_year[1])
chisq.test(poker_year[1,])
chisq.test(poker_year[2,])
chisq.test(poker_year[3,])
poker_outcomes <- c(.25, .25, .3, .2)
poker_year <- tibble(S = integer(), H = integer(), D = integer(), C = integer())
for (day in 1:365) {
todays_poker <- sample(c(1,2,3,4), 1600, replace = TRUE, prob = poker_outcomes)
todays_summary  <- table(todays_poker)
names(todays_summary) <- c("S", "H", "D", "C")
poker_year <- add_row(poker_year, S = todays_summary[1],
H = todays_summary[2],
D = todays_summary[3],
C = todays_summary[4])
}
chisq.test(poker_year[3,])
names(poker_year) <- c("Spades", "Hearts", "Diamonds", "Clubs")
write_csv(poker_year, 'poker_data.csv')
setwd("/Volumes/ipb-users-1/marli361/@Undervisning/@Kurser/FoU - R for Psychology Research/materials/Week 7")
write_csv(poker_year, 'poker_data.csv')
poker_outcomes <- c(.25, .25, .3, .2)
poker_year <- tibble(S = integer(), H = integer(), D = integer(), C = integer())
for (day in 1:365) {
todays_poker <- sample(c(1,2,3,4), 1600, replace = TRUE, prob = poker_outcomes)
todays_summary  <- table(todays_poker)
names(todays_summary) <- c("S", "H", "D", "C")
poker_year <- add_row(poker_year, S = todays_summary[1],
H = todays_summary[2],
D = todays_summary[3],
C = todays_summary[4])
}
names(poker_year) <- c("Spades", "Hearts", "Diamonds", "Clubs")
write_csv(poker_year, 'poker_data.csv')
rigged <- sample(c(0,1), 365, replace = TRUE, c(.65,.35))
poker_year <- tibble(S = integer(), H = integer(), D = integer(), C = integer())
for (day in 1:365) {
if (rigged[day] == 1) {
poker_outcomes <- c(.25, .25, .3, .2)
}else{
poker_outcomes <- c(.25, .25, .25, .25)
}
todays_poker <- sample(c(1,2,3,4), 1600, replace = TRUE, prob = poker_outcomes)
todays_summary  <- table(todays_poker)
names(todays_summary) <- c("S", "H", "D", "C")
poker_year <- add_row(poker_year, S = todays_summary[1],
H = todays_summary[2],
D = todays_summary[3],
C = todays_summary[4])
}
chisq.test(poker_year[1,])
chisq.test(poker_year[2,])
chisq.test(poker_year[3,])
chisq.test(poker_year[5,])
chisq.test(poker_year[6,])
rigged <- sample(c(0,1), 365, replace = TRUE, c(.65,.35))
poker_year <- tibble(S = integer(), H = integer(), D = integer(), C = integer())
for (day in 1:365) {
if (rigged[day] == 1) {
poker_outcomes <- c(.25, .25, .3, .2)
}else{
poker_outcomes <- c(.25, .25, .25, .25)
}
todays_poker <- sample(c(1,2,3,4), 1600, replace = TRUE, prob = poker_outcomes)
todays_summary  <- table(todays_poker)
names(todays_summary) <- c("S", "H", "D", "C")
poker_year <- add_row(poker_year, S = todays_summary[1],
H = todays_summary[2],
D = todays_summary[3],
C = todays_summary[4])
}
names(poker_year) <- c("Spades", "Hearts", "Diamonds", "Clubs")
write_csv(poker_year, 'poker_data.csv')
install.packages("REdaS")
