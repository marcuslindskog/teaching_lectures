xaringan:::inf_mr()
x <- 0
if (x < 0) {
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
if (x < 0) {
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else{
print("Zero")
}
paste(3, "Odd")
x <- 1:5
for (val in x) {
if (val == 3){
next
}
print(val)
}
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(dev = 'svg')
options(device = function(file, width, height) {
svg(tempfile(), width = width, height = height)
})
library(tidyverse)
vec <- 1:10
for(val in  vec){
k = val^2
print(k)
}
librar(psych)
x <- rnorm(100)
y < rnorm(100)
r <- cor(x, y)
x <- rnorm(100)
y <- rnorm(100)
r <- cor(x, y)
r
r_criterion <- .5
x <- rnorm(100)
y <- rnorm(100)
r <- cor(x, y)
count <- 0
while( r < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of', r))
r_criterion <- .1
x <- rnorm(100)
y <- rnorm(100)
r <- cor(x, y)
count <- 0
while( abs(r) < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of', r))
r_criterion <- .3
x <- rnorm(100)
y <- rnorm(100)
r <- cor(x, y)
count <- 0
while( abs(r) < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of', r))
r_criterion <- .3
x <- rnorm(100)
y <- rnorm(100)
r <- cor(x, y)
count <- 0
while( abs(r) < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of', r))
cor.test(x,y)
cor_values <- cor.test
cor_values <- cor.test(x,y)
cor_values$estimate
cor_values$estimate > .5
r_criterion <- .3
x <- rnorm(100)
y <- rnorm(100)
r <- ccor.test(x, y)
count <- 0
while( abs(r$estimate) < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of',
round(r, 2) , 'with a p-value of',
round(cor_values$p.value))
r_criterion <- .3
x <- rnorm(100)
y <- rnorm(100)
r <- ccor.test(x, y)
count <- 0
while( abs(r$estimate) < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of',
round(r, 2) , 'with a p-value of',
round(r$p.value))
r_criterion <- .3
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count <- 0
while( abs(r$estimate) < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of',
round(r, 2) , 'with a p-value of',
round(r$p.value))
)
r_criterion <- .3
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count <- 0
while( abs(r$estimate) < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of',
round(r, 2) , 'with a p-value of',
round(r$p.value, 2))
)
r_criterion <- .3
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count <- 0
while( abs(r$estimate) < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of',
round(r$estimate, 2) , 'with a p-value of',
round(r$p.value, 2))
)
r_criterion <- .3
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count <- 0
while( abs(r$estimate) < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of',
round(r$estimate, 2) , 'with a p-value of',
round(r$p.value, 4)))
r_criterion <- .3
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count <- 0
while( abs(r$estimate) < r_criterion ){
x <- rnorm(100)
y <- rnorm(100)
r <- cor.test(x, y)
count = count + 1
}
print(paste('It took', count,
'iterations to find a correlation of',
round(r$estimate, 3) , 'with a p-value of',
round(r$p.value, 4)))
?stop
two_vector_function <- function(x, y){
if(length(x) != length(y)){
stop("'x' and 'y' must be of the same length",
call. = FALSE)
}
(x + y)^2
}
x <- c(2, 3, 4)
y <- c(4, 5)
two_vector_function(x,y)
y <- c(4, 5, 9)
two_vector_function(x,y)
?if
))
?if()
?ifelse
xaringan:::inf_mr()
xaringan:::inf_mr()
install.packages("nlme")
installed.packages()
xaringan:::inf_mr()
library(tidyverse)
detach("package:Tidyverse", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
library(plyr)
sessionInfo()
install.packages(c("tidyverse", "psych", "nlme"))
install.packages(c("tidyverse", "psych", "nlme"))
library(psych)
?psych
?nlme
?lme
?iqitems
data("msq")
force(msq)
